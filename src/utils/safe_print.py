#!/usr/bin/env python3
"""
Safe Print Utilities
Remove caracteres Unicode problem√°ticos para evitar erros no Windows
"""

import sys
import logging
from typing import Any

# Mapeamento de caracteres Unicode para ASCII
UNICODE_REPLACEMENTS = {
    # Checkmarks e X
    '‚úì': '[OK]',
    '‚úó': '[X]',
    '‚úÖ': '[DONE]',
    '‚ùå': '[FAIL]',
    '‚òë': '[v]',
    '‚òí': '[x]',
    '‚úî': '[v]',
    '‚úñ': '[x]',
    
    # Avisos e status
    '‚ö†Ô∏è': '[WARN]',
    '‚ö†': '[!]',
    '‚è≥': '[WAIT]',
    '‚è∞': '[TIME]',
    'üöÄ': '[START]',
    'üîÑ': '[SYNC]',
    '‚ôªÔ∏è': '[RETRY]',
    
    # S√≠mbolos t√©cnicos
    'üîß': '[CONFIG]',
    'üõ†Ô∏è': '[TOOLS]',
    '‚öôÔ∏è': '[SETUP]',
    'üî®': '[BUILD]',
    
    # Financeiro
    'üí∞': '[$]',
    'üíµ': '[USD]',
    'üí∏': '[COST]',
    
    # Estat√≠sticas
    'üìä': '[STATS]',
    'üìà': '[UP]',
    'üìâ': '[DOWN]',
    'üìã': '[LIST]',
    
    # Informa√ß√£o
    'üìå': '[PIN]',
    'üìç': '[LOC]',
    'üîç': '[SEARCH]',
    'üí°': '[IDEA]',
    
    # Matem√°tica
    '‚â•': '>=',
    '‚â§': '<=',
    '‚â†': '!=',
    '‚âà': '~=',
    '‚àû': 'INF',
    
    # Setas
    '‚Üí': '->',
    '‚Üê': '<-',
    '‚Üë': '^',
    '‚Üì': 'v',
    '‚Üî': '<->',
    
    # Outros
    '‚Ä¢': '*',
    '‚ó¶': 'o',
    '‚ñ™': '-',
    '‚ñ´': '-',
    '‚ñ†': '[#]',
    '‚ñ°': '[ ]',
    '‚ñ¢': '[ ]',
    '‚ñ£': '[#]'
}


def safe_string(text: Any) -> str:
    """
    Converte qualquer entrada para string segura sem Unicode problem√°tico
    
    Args:
        text: Qualquer tipo de entrada
        
    Returns:
        String segura para impress√£o no Windows
    """
    # Converter para string
    if text is None:
        return ''
    
    if not isinstance(text, str):
        text = str(text)
    
    # Substituir caracteres problem√°ticos
    for unicode_char, ascii_char in UNICODE_REPLACEMENTS.items():
        text = text.replace(unicode_char, ascii_char)
    
    # Remover outros caracteres n√£o-ASCII se necess√°rio
    if sys.platform == 'win32':
        # No Windows, remover caracteres que n√£o podem ser codificados em cp1252
        try:
            text.encode('cp1252')
        except UnicodeEncodeError:
            # Remover caracteres problem√°ticos
            text = ''.join(char if ord(char) < 128 else '?' for char in text)
    
    return text


def safe_print(*args, **kwargs):
    """
    Print seguro que remove caracteres Unicode problem√°ticos
    
    Uso:
        safe_print("‚úì Sucesso!")  # Imprime: [OK] Sucesso!
    """
    # Converter todos os argumentos para strings seguras
    safe_args = [safe_string(arg) for arg in args]
    
    # Imprimir com argumentos seguros
    print(*safe_args, **kwargs)


def safe_log(logger: logging.Logger, level: int, message: str, *args, **kwargs):
    """
    Logging seguro que remove caracteres Unicode problem√°ticos
    
    Args:
        logger: Logger instance
        level: N√≠vel de log (logging.INFO, logging.ERROR, etc)
        message: Mensagem a logar
        *args: Argumentos adicionais
        **kwargs: Argumentos nomeados
    """
    safe_message = safe_string(message)
    
    # Se h√° argumentos, torn√°-los seguros tamb√©m
    if args:
        safe_args = tuple(safe_string(arg) for arg in args)
        logger.log(level, safe_message, *safe_args, **kwargs)
    else:
        logger.log(level, safe_message, **kwargs)


class SafeLogger:
    """
    Wrapper para logger que automaticamente remove Unicode problem√°tico
    """
    
    def __init__(self, logger: logging.Logger):
        self.logger = logger
    
    def debug(self, message: str, *args, **kwargs):
        safe_log(self.logger, logging.DEBUG, message, *args, **kwargs)
    
    def info(self, message: str, *args, **kwargs):
        safe_log(self.logger, logging.INFO, message, *args, **kwargs)
    
    def warning(self, message: str, *args, **kwargs):
        safe_log(self.logger, logging.WARNING, message, *args, **kwargs)
    
    def error(self, message: str, *args, **kwargs):
        safe_log(self.logger, logging.ERROR, message, *args, **kwargs)
    
    def critical(self, message: str, *args, **kwargs):
        safe_log(self.logger, logging.CRITICAL, message, *args, **kwargs)


# Fun√ß√£o helper para configurar logging seguro globalmente
def setup_safe_logging():
    """
    Configura o sistema de logging para usar strings seguras
    """
    import logging
    
    # Criar formatter personalizado
    class SafeFormatter(logging.Formatter):
        def format(self, record):
            # Formatar normalmente
            result = super().format(record)
            # Tornar seguro
            return safe_string(result)
    
    # Aplicar a todos os handlers existentes
    for handler in logging.root.handlers:
        handler.setFormatter(SafeFormatter(handler.formatter._fmt))
    
    # Configurar para novos loggers
    logging.basicConfig(
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        level=logging.INFO
    )
    
    # Aplicar formatter seguro ao handler padr√£o
    if logging.root.handlers:
        for handler in logging.root.handlers:
            original_format = handler.formatter._fmt if handler.formatter else '%(message)s'
            handler.setFormatter(SafeFormatter(original_format))


# Testes
if __name__ == "__main__":
    # Testar convers√µes
    test_strings = [
        "‚úì Teste aprovado",
        "‚úó Teste falhou",
        "‚ö†Ô∏è Aviso importante",
        "üí∞ Custo: $10.00",
        "üìä Estat√≠sticas: ‚â• 90%",
        "üîß Configura√ß√£o ‚Üí Completa",
        None,
        123,
        ["‚úÖ", "Lista", "com", "unicode"]
    ]
    
    print("=== TESTES DE CONVERS√ÉO ===")
    for test in test_strings:
        original = str(test) if test is not None else "None"
        safe = safe_string(test)
        print(f"Original: {original[:30]:<30} -> Seguro: {safe}")
    
    print("\n=== TESTE DE PRINT SEGURO ===")
    safe_print("‚úÖ Sucesso!", "‚ö†Ô∏è Aviso", "‚ùå Erro")
    
    print("\n=== TESTE DE LOGGING SEGURO ===")
    setup_safe_logging()
    logger = logging.getLogger(__name__)
    safe_logger = SafeLogger(logger)
    
    safe_logger.info("‚úì Informa√ß√£o com unicode")
    safe_logger.warning("‚ö†Ô∏è Aviso com emoji")
    safe_logger.error("‚úó Erro com s√≠mbolo")